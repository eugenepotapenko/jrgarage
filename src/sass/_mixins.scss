@function contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != "number" {
      @return false;
    }
  }

  @return true;
}

@function unpack($shorthand) {
  @if length($shorthand) == 1 {
    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);
  } @else if length($shorthand) == 2 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);
  } @else if length($shorthand) == 3 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);
  } @else {
    @return $shorthand;
  }
}

@function is-length($value) {
  @return type-of($value) != "null" and (str-slice($value + "", 1, 4) == "calc"
       or index(auto inherit initial 0, $value)
       or (type-of($value) == "number" and not(unitless($value))));
}

@function is-size($value) {
  @return is-length($value)
          or contains("fill" "fit-content" "min-content" "max-content", $value);
}


@mixin background-center($size: cover) {
  background: {
    position: 50% 50%;
    size: $size;
    repeat: no-repeat;
  }
}

@mixin clearfix {
  &:after {
    content: '';
    display: block;
    clear: both;
  }
}

@mixin center{
  position: absolute;
  top: 50%;
  left:50%;
  transform: translate(-50%,-50%);
}

@mixin scrollbars($width, $height, $foreground-color, $border-radius, $background-color: mix($foreground-color, white,  30%)) {
  ::-webkit-scrollbar {
    width: $width;
    height: $height;
  }

  ::-webkit-scrollbar-thumb {
    background: $foreground-color;
  }

  ::-webkit-scrollbar-track {
    border-radius:$border-radius;
    background: $background-color;
  }

  // ie
  body {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

@mixin tab-focus() {
  &:hover,
  &:active,
  &:focus{
    outline: none;
  }
}

@mixin rounded($radius:50%){
  border-radius: 50%;
}

@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%;
  height: auto;
}

@mixin size-reset($margin: 0, $padding: 0) {
  margin: $margin;
  padding: $padding;
}

@mixin placeholder($color) {
  &::-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}

//input{
//  @include placeholder(#0f0);
//}

$a-transition-long: .5s;

@mixin placeholder-animation-opacity($class, $transition: $a-transition-long, $text-indent: 250px){
  .#{$class}::-webkit-input-placeholder{
    will-change: opacity;
    opacity: 1;
    transition: opacity $transition;
  }
  .#{$class}:focus::-webkit-input-placeholder{
    opacity: 0;
  }

  .#{$class}::-moz-placeholder{
    will-change: opacity;
    opacity: 1;
    transition: opacity $transition;

    &:focus{
      opacity: 0;
    }
  }
  .#{$class}:-moz-placeholder{
    will-change: opacity;
    opacity: 1;
    transition: opacity $transition;

    &:focus{
      opacity: 0;
    }
  }
  .#{$class}:-ms-input-placeholder{
    will-change: opacity;
    opacity: 1;
    transition: opacity $transition;

    &:focus{
      opacity: 0;
    }
  }
}

// @include placeholder-animation-opacity(input-opacity);


@mixin placeholder-animation-left($class, $transition: $a-transition-long, $text-indent: -200px){
  .#{$class}::-webkit-input-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }
  .#{$class}:focus::-webkit-input-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}::-moz-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus::-moz-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}:-moz-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus:-moz-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}:-ms-input-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus:-ms-input-placeholder{
    text-indent: $text-indent;
  }
}

// @include placeholder-animation-left(input-left);

@mixin placeholder-animation-right($class, $transition: $a-transition-long, $text-indent: 250px){
  .#{$class}::-webkit-input-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }
  .#{$class}:focus::-webkit-input-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}::-moz-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus::-moz-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}:-moz-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus:-moz-placeholder{
    text-indent: $text-indent;
  }

  .#{$class}:-ms-input-placeholder{
    will-change: text-indent;
    text-indent: 0;
    transition:  text-indent $transition;
  }

  .#{$class}:focus:-ms-input-placeholder{
    text-indent: $text-indent;
  }
}

// @include placeholder-animation-right(input-right);

@mixin absolute($sides: null null null null) {
  position: absolute;
  $exact-size: (
          top: nth($sides, 1),
          right: nth($sides, 2),
          bottom: nth($sides, 3),
          left: nth($sides, 4)
  );
  @each $side, $value in $exact-size {
    @if is-length($value) {
      #{$side}: $value;
    }
  }
}

@mixin selection-style($bg-color, $color) {
  ::selection {
    background-color: $bg-color;
    color: $color;
  }
}


@mixin has-color($background-color, $color) {
  color: $color;
  background-color: $background-color;
}

@mixin size($value) {
  $width: nth($value, 1);
  $height: $width;

  @if length($value) > 1 {
    $height: nth($value, 2);
  }

  @if is-size($height) {
    height: $height;
  } @else {
    @warn "`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.";
  }

  @if is-size($width) {
    width: $width;
  } @else {
    @warn "`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.";
  }
}

@mixin transition-transform($transition: .15s ease-in-out) {
  will-change: transform;
  transition: transform $transition;
}

//@include transform-transition();
//@include transform-transition(.3s ease);


@mixin transition-willChange($value, $transition: .15s ease-in-out) {
  will-change: $value;
  transition: $value $transition;
}

//@include transition-willChange(opacity);
//@include transition-willChange(opacity, .3s ease-out);

//Mobile first
//**All media-queries -> min-width

// min-width extra small screen / phone portrait

@mixin xs {
  @media screen and (min-width: #{$xs}) {
    @content;
  }
}

// min-width extra small screen / phone landscape

@mixin xs-landcape {
  @media screen and (min-width: #{$xs-landscape}) {
    @content;
  }
}

// min-width small screen / tablets
@mixin sm {
  @media screen and (min-width: #{$sm}) {
    @content;
  }
}

// min-width medium screen / desktop
@mixin md {
  @media screen and (min-width: #{$md}) {
    @content;
  }
}

// min-width large screen / wide desktop
@mixin lg {
  @media screen and (min-width: #{$lg}) {
    @content;
  }
}

// min-width xlarge screen
@mixin xlg {
  @media screen and (min-width: #{$xlg}) {
    @content;
  }
}

//Mobile first invert
//**All media-queries -> max-width

// max-width extra small screen / phone portrait
@mixin max-xs {
  @media screen and (max-width: #{$xs}) {
    @content;
  }
}

// max-width extra small screen / phone landscape
@mixin max-xs-landscape {
  @media screen and (max-width: #{$xs-landscape}) {
    @content;
  }
}

// max-width small screen / tablets
@mixin max-sm {
  @media screen and (max-width: #{$sm}) {
    @content;
  }
}

// max-width medium screen / desktop
@mixin max-md {
  @media screen and (max-width: #{$md}) {
    @content;
  }
}

// max-width large screen / wide desktop
@mixin max-lg {
  @media screen and (max-width: #{$lg}) {
    @content;
  }
}

// max-width xlarge screen
@mixin max-xlg {
  @media screen and (max-width: #{$xlg}) {
    @content;
  }
}

//In-between media-queries
//**All media-rules -> min-width - max-width
// in order
@mixin xs-sm {
  @media (min-width: #{$xs}) and (max-width: #{$sm}) {
    @content;
  }
}

@mixin xs-xs-landscape {
  @media (min-width: #{$xs}) and (max-width: #{$xs-landscape}) {
    @content;
  }
}

@mixin xs-md {
  @media (min-width: #{$xs}) and (max-width: #{$md}) {
    @content;
  }
}

@mixin xs-lg {
  @media (min-width: #{$xs}) and (max-width: #{$lg}) {
    @content;
  }
}

@mixin xs-xlg {
  @media (min-width: #{$xs}) and (max-width: #{$xlg}) {
    @content;
  }
}

//*
@mixin xs-landscape-sm {
  @media (min-width: #{$xs-landscape}) and (max-width: #{$sm}) {
    @content;
  }
}

@mixin xs-landscape-md {
  @media (min-width: #{$xs-landscape}) and (max-width: #{$md}) {
    @content;
  }
}

@mixin xs-landscape-lg {
  @media (min-width: #{$xs-landscape}) and (max-width: #{$lg}) {
    @content;
  }
}

@mixin xs-landscape-xlg {
  @media (min-width: #{$xs-landscape}) and (max-width: #{$xlg}) {
    @content;
  }
}

//*

@mixin sm-md {
  @media (min-width: #{$sm}) and (max-width: #{$md}) {
    @content;
  }
}

@mixin sm-lg {
  @media (min-width: #{$sm}) and (max-width: #{$lg}) {
    @content;
  }
}

@mixin sm-xlg {
  @media (min-width: #{$sm}) and (max-width: #{$xlg}) {
    @content;
  }
}

@mixin md-lg {
  @media (min-width: #{$md}) and (max-width: #{$lg}) {
    @content;
  }
}

@mixin md-xlg {
  @media (min-width: #{$md}) and (max-width: #{$xlg}) {
    @content;
  }
}

//*
@mixin lg-xlg {
  @media (min-width: #{$lg}) and (max-width: #{$xlg}) {
    @content;
  }
}

//sm -1px
@mixin max-sm-pre {
  @media screen and (max-width: #{$sm-max}) {
    @content;
  }
}

//md -1px
@mixin max-md-pre {
  @media screen and (max-width: #{$md-max}) {
    @content;
  }
}

//lg -1px
@mixin max-lg-pre {
  @media screen and (max-width: #{$lg-max}) {
    @content;
  }
}

//xlg -1px
@mixin max-xlg-pre {
  @media screen and (max-width: #{$xlg-max}) {
    @content;
  }
}

// Media queries for iphones

// iPhone 3, 4:
@mixin iphone-4{
  @media screen and (device-aspect-ratio: 2/3) {
    @content;
  }
}

// iPhone 5:
@mixin iphone-5{
  @media screen and (device-aspect-ratio: 40/71) {
    @content;
  }
}

// iPhone 6:
@mixin iphone-6{
  @media screen and (device-aspect-ratio: 375/667) {
    @content;
  }
}

// iPhone 6 Plus:
@mixin iphone-6plus{
  @media only screen and (min-device-width : 414px) and (max-device-width : 736px) and (-webkit-min-device-pixel-ratio : 3) and (-webkit-device-pixel-ratio : 3) {
    @content;
  }
}

// variantly media query mixin
@mixin mq($min-width, $max-width){
  @media screen and (min-width:$min-width) and (max-width:$max-width) {
    @content;
  }
}

// mixin for height min
@mixin mq-height-min($min-height){
  @media screen and (min-height: $min-height){
    @content;
  }
}

// mixin for height max
@mixin mq-height-max($max-height){
  @media screen and (max-height: $max-height){
    @content;
  }
}

@mixin flex-dispay($direction: row) {
  display: flex;
  flex-direction: $direction;
}

@mixin flex-center {
  justify-content: center;
  align-items: center;
}

@mixin flex($justify, $align) {
  justify-content: $justify;
  align-items: $align;
}